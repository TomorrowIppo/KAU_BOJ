배열 : 메모리 상에 원소를 연속하게 배치한 자료구조

성질
1. O(1)에 k번째 원소를 확인/변경 가능
2. 추가적으로 소모되는 메모리의 양(=overhead)가 거의 없음
3. 메모리 상에 데이터가 붙어있어서 Cache hit rate가 높음
4. 메모리 상에 연속한 구간을 잡아야 해서 할당에 제약이 걸림

배열의 연산
1. 임의의 위치에 있는 원소를 확인/변경, O(1)
2. 원소를 끝에 추가, O(1)
3. 마지막 원소를 제거, O(1)
4. 임의의 위치에 원소를 추가/제거 O(N)

사용 팁
int a[21];
int b[21][21];

// 1. memset by cstring.h
memset(a, 0, sizeof a);
memset(b, 0, sizeof b);

// 2. for
for(int i = 0; i < 21; i++) 
    a[i] = 0;
for(int i = 0; i < 21; i++)
    for(int j = 0; j < 21; j++)
        b[i][j] = 0;

// 3. fill by algorithm.h
fill(a, a+21, 0);
for(int i = 0; i < 21; i++)
    fill(b[i], b[i]+21, 0);

memset은 0, -1이 아닌 다른 값을 넣으면 오동작할 수도 있고, 2차원 이상의 배열을 함수인자로 넘긴 뒤 그곳에서 memset을 하면 잘못 돌아가는 경우가 있음
실수의 여지가 많기에 memset은 " 비추천 "

for은 투박하지만 확실함

fill은 코드도 짧고 실수할 여지도 없고 익숙해지면 가장 추천하는 방식